// Code generated by counterfeiter. DO NOT EDIT.
package utilsfakes

import (
	"sync"

	"github.com/paketo-buildpacks/dep-server/actions/update-php-extension-files/entrypoint/utils"
)

type FakeChecksummerPHP struct {
	GetMD5Stub        func(string) (string, error)
	getMD5Mutex       sync.RWMutex
	getMD5ArgsForCall []struct {
		arg1 string
	}
	getMD5Returns struct {
		result1 string
		result2 error
	}
	getMD5ReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeChecksummerPHP) GetMD5(arg1 string) (string, error) {
	fake.getMD5Mutex.Lock()
	ret, specificReturn := fake.getMD5ReturnsOnCall[len(fake.getMD5ArgsForCall)]
	fake.getMD5ArgsForCall = append(fake.getMD5ArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetMD5Stub
	fakeReturns := fake.getMD5Returns
	fake.recordInvocation("GetMD5", []interface{}{arg1})
	fake.getMD5Mutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeChecksummerPHP) GetMD5CallCount() int {
	fake.getMD5Mutex.RLock()
	defer fake.getMD5Mutex.RUnlock()
	return len(fake.getMD5ArgsForCall)
}

func (fake *FakeChecksummerPHP) GetMD5Calls(stub func(string) (string, error)) {
	fake.getMD5Mutex.Lock()
	defer fake.getMD5Mutex.Unlock()
	fake.GetMD5Stub = stub
}

func (fake *FakeChecksummerPHP) GetMD5ArgsForCall(i int) string {
	fake.getMD5Mutex.RLock()
	defer fake.getMD5Mutex.RUnlock()
	argsForCall := fake.getMD5ArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeChecksummerPHP) GetMD5Returns(result1 string, result2 error) {
	fake.getMD5Mutex.Lock()
	defer fake.getMD5Mutex.Unlock()
	fake.GetMD5Stub = nil
	fake.getMD5Returns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeChecksummerPHP) GetMD5ReturnsOnCall(i int, result1 string, result2 error) {
	fake.getMD5Mutex.Lock()
	defer fake.getMD5Mutex.Unlock()
	fake.GetMD5Stub = nil
	if fake.getMD5ReturnsOnCall == nil {
		fake.getMD5ReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getMD5ReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeChecksummerPHP) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMD5Mutex.RLock()
	defer fake.getMD5Mutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeChecksummerPHP) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.ChecksummerPHP = new(FakeChecksummerPHP)
