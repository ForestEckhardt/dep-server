// Code generated by counterfeiter. DO NOT EDIT.
package utilsfakes

import (
	"sync"

	"github.com/paketo-buildpacks/dep-server/actions/update-php-extension-files/entrypoint/utils"
)

type FakePHPExtUtils struct {
	GetLatestUpstreamVersionStub        func(string) (utils.ExtensionVersion, error)
	getLatestUpstreamVersionMutex       sync.RWMutex
	getLatestUpstreamVersionArgsForCall []struct {
		arg1 string
	}
	getLatestUpstreamVersionReturns struct {
		result1 utils.ExtensionVersion
		result2 error
	}
	getLatestUpstreamVersionReturnsOnCall map[int]struct {
		result1 utils.ExtensionVersion
		result2 error
	}
	GetPHPExtensionsYMLFilesStub        func(string) (map[string]utils.PHPExtMetadataFile, error)
	getPHPExtensionsYMLFilesMutex       sync.RWMutex
	getPHPExtensionsYMLFilesArgsForCall []struct {
		arg1 string
	}
	getPHPExtensionsYMLFilesReturns struct {
		result1 map[string]utils.PHPExtMetadataFile
		result2 error
	}
	getPHPExtensionsYMLFilesReturnsOnCall map[int]struct {
		result1 map[string]utils.PHPExtMetadataFile
		result2 error
	}
	GetUpdatedExtensionsStub        func([]utils.PHPExtension) ([]utils.PHPExtension, error)
	getUpdatedExtensionsMutex       sync.RWMutex
	getUpdatedExtensionsArgsForCall []struct {
		arg1 []utils.PHPExtension
	}
	getUpdatedExtensionsReturns struct {
		result1 []utils.PHPExtension
		result2 error
	}
	getUpdatedExtensionsReturnsOnCall map[int]struct {
		result1 []utils.PHPExtension
		result2 error
	}
	GetUpdatedMetadataFileStub        func(utils.PHPExtMetadataFile) (utils.PHPExtMetadataFile, error)
	getUpdatedMetadataFileMutex       sync.RWMutex
	getUpdatedMetadataFileArgsForCall []struct {
		arg1 utils.PHPExtMetadataFile
	}
	getUpdatedMetadataFileReturns struct {
		result1 utils.PHPExtMetadataFile
		result2 error
	}
	getUpdatedMetadataFileReturnsOnCall map[int]struct {
		result1 utils.PHPExtMetadataFile
		result2 error
	}
	ParseYMLStub        func(string) (utils.PHPExtMetadataFile, error)
	parseYMLMutex       sync.RWMutex
	parseYMLArgsForCall []struct {
		arg1 string
	}
	parseYMLReturns struct {
		result1 utils.PHPExtMetadataFile
		result2 error
	}
	parseYMLReturnsOnCall map[int]struct {
		result1 utils.PHPExtMetadataFile
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePHPExtUtils) GetLatestUpstreamVersion(arg1 string) (utils.ExtensionVersion, error) {
	fake.getLatestUpstreamVersionMutex.Lock()
	ret, specificReturn := fake.getLatestUpstreamVersionReturnsOnCall[len(fake.getLatestUpstreamVersionArgsForCall)]
	fake.getLatestUpstreamVersionArgsForCall = append(fake.getLatestUpstreamVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetLatestUpstreamVersionStub
	fakeReturns := fake.getLatestUpstreamVersionReturns
	fake.recordInvocation("GetLatestUpstreamVersion", []interface{}{arg1})
	fake.getLatestUpstreamVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePHPExtUtils) GetLatestUpstreamVersionCallCount() int {
	fake.getLatestUpstreamVersionMutex.RLock()
	defer fake.getLatestUpstreamVersionMutex.RUnlock()
	return len(fake.getLatestUpstreamVersionArgsForCall)
}

func (fake *FakePHPExtUtils) GetLatestUpstreamVersionCalls(stub func(string) (utils.ExtensionVersion, error)) {
	fake.getLatestUpstreamVersionMutex.Lock()
	defer fake.getLatestUpstreamVersionMutex.Unlock()
	fake.GetLatestUpstreamVersionStub = stub
}

func (fake *FakePHPExtUtils) GetLatestUpstreamVersionArgsForCall(i int) string {
	fake.getLatestUpstreamVersionMutex.RLock()
	defer fake.getLatestUpstreamVersionMutex.RUnlock()
	argsForCall := fake.getLatestUpstreamVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePHPExtUtils) GetLatestUpstreamVersionReturns(result1 utils.ExtensionVersion, result2 error) {
	fake.getLatestUpstreamVersionMutex.Lock()
	defer fake.getLatestUpstreamVersionMutex.Unlock()
	fake.GetLatestUpstreamVersionStub = nil
	fake.getLatestUpstreamVersionReturns = struct {
		result1 utils.ExtensionVersion
		result2 error
	}{result1, result2}
}

func (fake *FakePHPExtUtils) GetLatestUpstreamVersionReturnsOnCall(i int, result1 utils.ExtensionVersion, result2 error) {
	fake.getLatestUpstreamVersionMutex.Lock()
	defer fake.getLatestUpstreamVersionMutex.Unlock()
	fake.GetLatestUpstreamVersionStub = nil
	if fake.getLatestUpstreamVersionReturnsOnCall == nil {
		fake.getLatestUpstreamVersionReturnsOnCall = make(map[int]struct {
			result1 utils.ExtensionVersion
			result2 error
		})
	}
	fake.getLatestUpstreamVersionReturnsOnCall[i] = struct {
		result1 utils.ExtensionVersion
		result2 error
	}{result1, result2}
}

func (fake *FakePHPExtUtils) GetPHPExtensionsYMLFiles(arg1 string) (map[string]utils.PHPExtMetadataFile, error) {
	fake.getPHPExtensionsYMLFilesMutex.Lock()
	ret, specificReturn := fake.getPHPExtensionsYMLFilesReturnsOnCall[len(fake.getPHPExtensionsYMLFilesArgsForCall)]
	fake.getPHPExtensionsYMLFilesArgsForCall = append(fake.getPHPExtensionsYMLFilesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetPHPExtensionsYMLFilesStub
	fakeReturns := fake.getPHPExtensionsYMLFilesReturns
	fake.recordInvocation("GetPHPExtensionsYMLFiles", []interface{}{arg1})
	fake.getPHPExtensionsYMLFilesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePHPExtUtils) GetPHPExtensionsYMLFilesCallCount() int {
	fake.getPHPExtensionsYMLFilesMutex.RLock()
	defer fake.getPHPExtensionsYMLFilesMutex.RUnlock()
	return len(fake.getPHPExtensionsYMLFilesArgsForCall)
}

func (fake *FakePHPExtUtils) GetPHPExtensionsYMLFilesCalls(stub func(string) (map[string]utils.PHPExtMetadataFile, error)) {
	fake.getPHPExtensionsYMLFilesMutex.Lock()
	defer fake.getPHPExtensionsYMLFilesMutex.Unlock()
	fake.GetPHPExtensionsYMLFilesStub = stub
}

func (fake *FakePHPExtUtils) GetPHPExtensionsYMLFilesArgsForCall(i int) string {
	fake.getPHPExtensionsYMLFilesMutex.RLock()
	defer fake.getPHPExtensionsYMLFilesMutex.RUnlock()
	argsForCall := fake.getPHPExtensionsYMLFilesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePHPExtUtils) GetPHPExtensionsYMLFilesReturns(result1 map[string]utils.PHPExtMetadataFile, result2 error) {
	fake.getPHPExtensionsYMLFilesMutex.Lock()
	defer fake.getPHPExtensionsYMLFilesMutex.Unlock()
	fake.GetPHPExtensionsYMLFilesStub = nil
	fake.getPHPExtensionsYMLFilesReturns = struct {
		result1 map[string]utils.PHPExtMetadataFile
		result2 error
	}{result1, result2}
}

func (fake *FakePHPExtUtils) GetPHPExtensionsYMLFilesReturnsOnCall(i int, result1 map[string]utils.PHPExtMetadataFile, result2 error) {
	fake.getPHPExtensionsYMLFilesMutex.Lock()
	defer fake.getPHPExtensionsYMLFilesMutex.Unlock()
	fake.GetPHPExtensionsYMLFilesStub = nil
	if fake.getPHPExtensionsYMLFilesReturnsOnCall == nil {
		fake.getPHPExtensionsYMLFilesReturnsOnCall = make(map[int]struct {
			result1 map[string]utils.PHPExtMetadataFile
			result2 error
		})
	}
	fake.getPHPExtensionsYMLFilesReturnsOnCall[i] = struct {
		result1 map[string]utils.PHPExtMetadataFile
		result2 error
	}{result1, result2}
}

func (fake *FakePHPExtUtils) GetUpdatedExtensions(arg1 []utils.PHPExtension) ([]utils.PHPExtension, error) {
	var arg1Copy []utils.PHPExtension
	if arg1 != nil {
		arg1Copy = make([]utils.PHPExtension, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.getUpdatedExtensionsMutex.Lock()
	ret, specificReturn := fake.getUpdatedExtensionsReturnsOnCall[len(fake.getUpdatedExtensionsArgsForCall)]
	fake.getUpdatedExtensionsArgsForCall = append(fake.getUpdatedExtensionsArgsForCall, struct {
		arg1 []utils.PHPExtension
	}{arg1Copy})
	stub := fake.GetUpdatedExtensionsStub
	fakeReturns := fake.getUpdatedExtensionsReturns
	fake.recordInvocation("GetUpdatedExtensions", []interface{}{arg1Copy})
	fake.getUpdatedExtensionsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePHPExtUtils) GetUpdatedExtensionsCallCount() int {
	fake.getUpdatedExtensionsMutex.RLock()
	defer fake.getUpdatedExtensionsMutex.RUnlock()
	return len(fake.getUpdatedExtensionsArgsForCall)
}

func (fake *FakePHPExtUtils) GetUpdatedExtensionsCalls(stub func([]utils.PHPExtension) ([]utils.PHPExtension, error)) {
	fake.getUpdatedExtensionsMutex.Lock()
	defer fake.getUpdatedExtensionsMutex.Unlock()
	fake.GetUpdatedExtensionsStub = stub
}

func (fake *FakePHPExtUtils) GetUpdatedExtensionsArgsForCall(i int) []utils.PHPExtension {
	fake.getUpdatedExtensionsMutex.RLock()
	defer fake.getUpdatedExtensionsMutex.RUnlock()
	argsForCall := fake.getUpdatedExtensionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePHPExtUtils) GetUpdatedExtensionsReturns(result1 []utils.PHPExtension, result2 error) {
	fake.getUpdatedExtensionsMutex.Lock()
	defer fake.getUpdatedExtensionsMutex.Unlock()
	fake.GetUpdatedExtensionsStub = nil
	fake.getUpdatedExtensionsReturns = struct {
		result1 []utils.PHPExtension
		result2 error
	}{result1, result2}
}

func (fake *FakePHPExtUtils) GetUpdatedExtensionsReturnsOnCall(i int, result1 []utils.PHPExtension, result2 error) {
	fake.getUpdatedExtensionsMutex.Lock()
	defer fake.getUpdatedExtensionsMutex.Unlock()
	fake.GetUpdatedExtensionsStub = nil
	if fake.getUpdatedExtensionsReturnsOnCall == nil {
		fake.getUpdatedExtensionsReturnsOnCall = make(map[int]struct {
			result1 []utils.PHPExtension
			result2 error
		})
	}
	fake.getUpdatedExtensionsReturnsOnCall[i] = struct {
		result1 []utils.PHPExtension
		result2 error
	}{result1, result2}
}

func (fake *FakePHPExtUtils) GetUpdatedMetadataFile(arg1 utils.PHPExtMetadataFile) (utils.PHPExtMetadataFile, error) {
	fake.getUpdatedMetadataFileMutex.Lock()
	ret, specificReturn := fake.getUpdatedMetadataFileReturnsOnCall[len(fake.getUpdatedMetadataFileArgsForCall)]
	fake.getUpdatedMetadataFileArgsForCall = append(fake.getUpdatedMetadataFileArgsForCall, struct {
		arg1 utils.PHPExtMetadataFile
	}{arg1})
	stub := fake.GetUpdatedMetadataFileStub
	fakeReturns := fake.getUpdatedMetadataFileReturns
	fake.recordInvocation("GetUpdatedMetadataFile", []interface{}{arg1})
	fake.getUpdatedMetadataFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePHPExtUtils) GetUpdatedMetadataFileCallCount() int {
	fake.getUpdatedMetadataFileMutex.RLock()
	defer fake.getUpdatedMetadataFileMutex.RUnlock()
	return len(fake.getUpdatedMetadataFileArgsForCall)
}

func (fake *FakePHPExtUtils) GetUpdatedMetadataFileCalls(stub func(utils.PHPExtMetadataFile) (utils.PHPExtMetadataFile, error)) {
	fake.getUpdatedMetadataFileMutex.Lock()
	defer fake.getUpdatedMetadataFileMutex.Unlock()
	fake.GetUpdatedMetadataFileStub = stub
}

func (fake *FakePHPExtUtils) GetUpdatedMetadataFileArgsForCall(i int) utils.PHPExtMetadataFile {
	fake.getUpdatedMetadataFileMutex.RLock()
	defer fake.getUpdatedMetadataFileMutex.RUnlock()
	argsForCall := fake.getUpdatedMetadataFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePHPExtUtils) GetUpdatedMetadataFileReturns(result1 utils.PHPExtMetadataFile, result2 error) {
	fake.getUpdatedMetadataFileMutex.Lock()
	defer fake.getUpdatedMetadataFileMutex.Unlock()
	fake.GetUpdatedMetadataFileStub = nil
	fake.getUpdatedMetadataFileReturns = struct {
		result1 utils.PHPExtMetadataFile
		result2 error
	}{result1, result2}
}

func (fake *FakePHPExtUtils) GetUpdatedMetadataFileReturnsOnCall(i int, result1 utils.PHPExtMetadataFile, result2 error) {
	fake.getUpdatedMetadataFileMutex.Lock()
	defer fake.getUpdatedMetadataFileMutex.Unlock()
	fake.GetUpdatedMetadataFileStub = nil
	if fake.getUpdatedMetadataFileReturnsOnCall == nil {
		fake.getUpdatedMetadataFileReturnsOnCall = make(map[int]struct {
			result1 utils.PHPExtMetadataFile
			result2 error
		})
	}
	fake.getUpdatedMetadataFileReturnsOnCall[i] = struct {
		result1 utils.PHPExtMetadataFile
		result2 error
	}{result1, result2}
}

func (fake *FakePHPExtUtils) ParseYML(arg1 string) (utils.PHPExtMetadataFile, error) {
	fake.parseYMLMutex.Lock()
	ret, specificReturn := fake.parseYMLReturnsOnCall[len(fake.parseYMLArgsForCall)]
	fake.parseYMLArgsForCall = append(fake.parseYMLArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ParseYMLStub
	fakeReturns := fake.parseYMLReturns
	fake.recordInvocation("ParseYML", []interface{}{arg1})
	fake.parseYMLMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePHPExtUtils) ParseYMLCallCount() int {
	fake.parseYMLMutex.RLock()
	defer fake.parseYMLMutex.RUnlock()
	return len(fake.parseYMLArgsForCall)
}

func (fake *FakePHPExtUtils) ParseYMLCalls(stub func(string) (utils.PHPExtMetadataFile, error)) {
	fake.parseYMLMutex.Lock()
	defer fake.parseYMLMutex.Unlock()
	fake.ParseYMLStub = stub
}

func (fake *FakePHPExtUtils) ParseYMLArgsForCall(i int) string {
	fake.parseYMLMutex.RLock()
	defer fake.parseYMLMutex.RUnlock()
	argsForCall := fake.parseYMLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePHPExtUtils) ParseYMLReturns(result1 utils.PHPExtMetadataFile, result2 error) {
	fake.parseYMLMutex.Lock()
	defer fake.parseYMLMutex.Unlock()
	fake.ParseYMLStub = nil
	fake.parseYMLReturns = struct {
		result1 utils.PHPExtMetadataFile
		result2 error
	}{result1, result2}
}

func (fake *FakePHPExtUtils) ParseYMLReturnsOnCall(i int, result1 utils.PHPExtMetadataFile, result2 error) {
	fake.parseYMLMutex.Lock()
	defer fake.parseYMLMutex.Unlock()
	fake.ParseYMLStub = nil
	if fake.parseYMLReturnsOnCall == nil {
		fake.parseYMLReturnsOnCall = make(map[int]struct {
			result1 utils.PHPExtMetadataFile
			result2 error
		})
	}
	fake.parseYMLReturnsOnCall[i] = struct {
		result1 utils.PHPExtMetadataFile
		result2 error
	}{result1, result2}
}

func (fake *FakePHPExtUtils) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getLatestUpstreamVersionMutex.RLock()
	defer fake.getLatestUpstreamVersionMutex.RUnlock()
	fake.getPHPExtensionsYMLFilesMutex.RLock()
	defer fake.getPHPExtensionsYMLFilesMutex.RUnlock()
	fake.getUpdatedExtensionsMutex.RLock()
	defer fake.getUpdatedExtensionsMutex.RUnlock()
	fake.getUpdatedMetadataFileMutex.RLock()
	defer fake.getUpdatedMetadataFileMutex.RUnlock()
	fake.parseYMLMutex.RLock()
	defer fake.parseYMLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePHPExtUtils) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ utils.PHPExtUtils = new(FakePHPExtUtils)
